"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-pc$x0om867xhr7@mcssq90mo02s0w-vtu&)^i#*q@!kq8saou('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
# Tell Django itâ€™s behind a proxy that handles HTTPS
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
ALLOWED_HOSTS = ["127.0.0.1", "localhost"]

# Enforce HTTPS for all requests
SECURE_SSL_REDIRECT = True  # Redirect all HTTP requests to HTTPS
# HTTP Strict Transport Security (HSTS)
SECURE_HSTS_SECONDS = 31536000           # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True    # Include all subdomains
SECURE_HSTS_PRELOAD = True               # Allow site to be preloaded in browsers

# Security headers
SECURE_CONTENT_TYPE_NOSNIFF = True       # Prevent MIME type sniffing
SECURE_BROWSER_XSS_FILTER = True         # Enable browser XSS filtering
X_FRAME_OPTIONS = 'DENY'                 # Prevent clickjacking

# Ensure session and CSRF cookies are only sent over HTTPS
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True  # Optional: protects CSRF cookie from JS access

# Content Security Policy (optional if using middleware)
# CSP can be added with django-csp middleware
# Example:
# INSTALLED_APPS += ['csp']
# CSP_DEFAULT_SRC = ("'self'",)
# HTTPS Security Settings
# ----------------------Documentation and Review------------------
# SECURE_SSL_REDIRECT: Redirects all HTTP traffic to HTTPS
# SECURE_HSTS_SECONDS: Tells browsers to always use HTTPS for 1 year
# SECURE_HSTS_INCLUDE_SUBDOMAINS: Applies HSTS to all subdomains
# SECURE_HSTS_PRELOAD: Allows HSTS preloading in browsers
# SESSION_COOKIE_SECURE & CSRF_COOKIE_SECURE: Ensures cookies are sent only over HTTPS
# X_FRAME_OPTIONS: Protects against clickjacking
# SECURE_CONTENT_TYPE_NOSNIFF: Prevents MIME type sniffing
# SECURE_BROWSER_XSS_FILTER: Enables browser's XSS filter

#-----Security Review Notes---

#HTTPS enforced: All HTTP requests redirected to HTTPS.

#Secure cookies: Sessions and CSRF tokens only transmitted over HTTPS.

#Security headers: Protect against XSS, clickjacking, and content sniffing.

#----Areas for improvement:----

#Implement CSP via django-csp for extra XSS protection.

#Regularly rotate SSL certificates and check for expired keys.

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookshelf',  # <-- added
    'relationship_app',
    'csp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
     'csp.middleware.CSPMiddleware',
]
CONTENT_SECURITY_POLICY = {
    'default-src': ("'self'",),
    'script-src': ("'self'",),
    'style-src': ("'self'", 'https://fonts.googleapis.com'),
}

ROOT_URLCONF = 'LibraryProject.urls'
# settings.py
AUTH_USER_MODEL = "relationship_app.CustomUser"


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True
import os
# Media files (uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# Tell Django where to look for static files in addition to app-level "static" folders
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
